// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "service.proto" (package "test_tablelink", syntax proto3)
// tslint:disable
import { ItemService } from "./service";
import type { ListItemsResponse } from "./service";
import type { ListItemsRequest } from "./service";
import type { DeleteItemResponse } from "./service";
import type { DeleteItemRequest } from "./service";
import type { UpdateItemResponse } from "./service";
import type { UpdateItemRequest } from "./service";
import type { CreateItemResponse } from "./service";
import type { CreateItemRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { IngredientService } from "./service";
import type { ListIngredientsResponse } from "./service";
import type { ListIngredientsRequest } from "./service";
import type { DeleteIngredientResponse } from "./service";
import type { DeleteIngredientRequest } from "./service";
import type { UpdateIngredientResponse } from "./service";
import type { UpdateIngredientRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateIngredientResponse } from "./service";
import type { CreateIngredientRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Ingredient Service
 *
 * @generated from protobuf service test_tablelink.IngredientService
 */
export interface IIngredientServiceClient {
    /**
     * @generated from protobuf rpc: CreateIngredient(test_tablelink.CreateIngredientRequest) returns (test_tablelink.CreateIngredientResponse);
     */
    createIngredient(input: CreateIngredientRequest, options?: RpcOptions): UnaryCall<CreateIngredientRequest, CreateIngredientResponse>;
    /**
     * @generated from protobuf rpc: UpdateIngredient(test_tablelink.UpdateIngredientRequest) returns (test_tablelink.UpdateIngredientResponse);
     */
    updateIngredient(input: UpdateIngredientRequest, options?: RpcOptions): UnaryCall<UpdateIngredientRequest, UpdateIngredientResponse>;
    /**
     * @generated from protobuf rpc: DeleteIngredient(test_tablelink.DeleteIngredientRequest) returns (test_tablelink.DeleteIngredientResponse);
     */
    deleteIngredient(input: DeleteIngredientRequest, options?: RpcOptions): UnaryCall<DeleteIngredientRequest, DeleteIngredientResponse>;
    /**
     * @generated from protobuf rpc: ListIngredients(test_tablelink.ListIngredientsRequest) returns (test_tablelink.ListIngredientsResponse);
     */
    listIngredients(input: ListIngredientsRequest, options?: RpcOptions): UnaryCall<ListIngredientsRequest, ListIngredientsResponse>;
}
/**
 * Ingredient Service
 *
 * @generated from protobuf service test_tablelink.IngredientService
 */
export class IngredientServiceClient implements IIngredientServiceClient, ServiceInfo {
    typeName = IngredientService.typeName;
    methods = IngredientService.methods;
    options = IngredientService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateIngredient(test_tablelink.CreateIngredientRequest) returns (test_tablelink.CreateIngredientResponse);
     */
    createIngredient(input: CreateIngredientRequest, options?: RpcOptions): UnaryCall<CreateIngredientRequest, CreateIngredientResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateIngredientRequest, CreateIngredientResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateIngredient(test_tablelink.UpdateIngredientRequest) returns (test_tablelink.UpdateIngredientResponse);
     */
    updateIngredient(input: UpdateIngredientRequest, options?: RpcOptions): UnaryCall<UpdateIngredientRequest, UpdateIngredientResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateIngredientRequest, UpdateIngredientResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteIngredient(test_tablelink.DeleteIngredientRequest) returns (test_tablelink.DeleteIngredientResponse);
     */
    deleteIngredient(input: DeleteIngredientRequest, options?: RpcOptions): UnaryCall<DeleteIngredientRequest, DeleteIngredientResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteIngredientRequest, DeleteIngredientResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListIngredients(test_tablelink.ListIngredientsRequest) returns (test_tablelink.ListIngredientsResponse);
     */
    listIngredients(input: ListIngredientsRequest, options?: RpcOptions): UnaryCall<ListIngredientsRequest, ListIngredientsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListIngredientsRequest, ListIngredientsResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Item Service
 *
 * @generated from protobuf service test_tablelink.ItemService
 */
export interface IItemServiceClient {
    /**
     * @generated from protobuf rpc: CreateItem(test_tablelink.CreateItemRequest) returns (test_tablelink.CreateItemResponse);
     */
    createItem(input: CreateItemRequest, options?: RpcOptions): UnaryCall<CreateItemRequest, CreateItemResponse>;
    /**
     * @generated from protobuf rpc: UpdateItem(test_tablelink.UpdateItemRequest) returns (test_tablelink.UpdateItemResponse);
     */
    updateItem(input: UpdateItemRequest, options?: RpcOptions): UnaryCall<UpdateItemRequest, UpdateItemResponse>;
    /**
     * @generated from protobuf rpc: DeleteItem(test_tablelink.DeleteItemRequest) returns (test_tablelink.DeleteItemResponse);
     */
    deleteItem(input: DeleteItemRequest, options?: RpcOptions): UnaryCall<DeleteItemRequest, DeleteItemResponse>;
    /**
     * @generated from protobuf rpc: ListItems(test_tablelink.ListItemsRequest) returns (test_tablelink.ListItemsResponse);
     */
    listItems(input: ListItemsRequest, options?: RpcOptions): UnaryCall<ListItemsRequest, ListItemsResponse>;
}
/**
 * Item Service
 *
 * @generated from protobuf service test_tablelink.ItemService
 */
export class ItemServiceClient implements IItemServiceClient, ServiceInfo {
    typeName = ItemService.typeName;
    methods = ItemService.methods;
    options = ItemService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateItem(test_tablelink.CreateItemRequest) returns (test_tablelink.CreateItemResponse);
     */
    createItem(input: CreateItemRequest, options?: RpcOptions): UnaryCall<CreateItemRequest, CreateItemResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateItemRequest, CreateItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateItem(test_tablelink.UpdateItemRequest) returns (test_tablelink.UpdateItemResponse);
     */
    updateItem(input: UpdateItemRequest, options?: RpcOptions): UnaryCall<UpdateItemRequest, UpdateItemResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateItemRequest, UpdateItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteItem(test_tablelink.DeleteItemRequest) returns (test_tablelink.DeleteItemResponse);
     */
    deleteItem(input: DeleteItemRequest, options?: RpcOptions): UnaryCall<DeleteItemRequest, DeleteItemResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteItemRequest, DeleteItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListItems(test_tablelink.ListItemsRequest) returns (test_tablelink.ListItemsResponse);
     */
    listItems(input: ListItemsRequest, options?: RpcOptions): UnaryCall<ListItemsRequest, ListItemsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListItemsRequest, ListItemsResponse>("unary", this._transport, method, opt, input);
    }
}
