// @generated by protobuf-ts 2.9.6 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "service.proto" (package "test_tablelink", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message test_tablelink.CreateIngredientRequest
 */
export interface CreateIngredientRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: bool cause_alergy = 2;
     */
    causeAlergy: boolean;
    /**
     * @generated from protobuf field: int32 type = 3;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
}
/**
 * @generated from protobuf message test_tablelink.CreateIngredientResponse
 */
export interface CreateIngredientResponse {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
}
/**
 * @generated from protobuf message test_tablelink.UpdateIngredientRequest
 */
export interface UpdateIngredientRequest {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool cause_alergy = 3;
     */
    causeAlergy: boolean;
    /**
     * @generated from protobuf field: int32 type = 4;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 status = 5;
     */
    status: number;
}
/**
 * @generated from protobuf message test_tablelink.UpdateIngredientResponse
 */
export interface UpdateIngredientResponse {
}
/**
 * @generated from protobuf message test_tablelink.DeleteIngredientRequest
 */
export interface DeleteIngredientRequest {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
}
/**
 * @generated from protobuf message test_tablelink.DeleteIngredientResponse
 */
export interface DeleteIngredientResponse {
}
/**
 * @generated from protobuf message test_tablelink.ListIngredientsRequest
 */
export interface ListIngredientsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
}
/**
 * @generated from protobuf message test_tablelink.ListIngredientsResponse
 */
export interface ListIngredientsResponse {
    /**
     * @generated from protobuf field: repeated test_tablelink.Ingredient ingredients = 1;
     */
    ingredients: Ingredient[];
}
/**
 * @generated from protobuf message test_tablelink.Ingredient
 */
export interface Ingredient {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bool cause_alergy = 3;
     */
    causeAlergy: boolean;
    /**
     * @generated from protobuf field: int32 type = 4;
     */
    type: number;
    /**
     * @generated from protobuf field: int32 status = 5;
     */
    status: number;
    /**
     * @generated from protobuf field: string created_at = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 7;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string deleted_at = 8;
     */
    deletedAt: string;
}
/**
 * @generated from protobuf message test_tablelink.CreateItemRequest
 */
export interface CreateItemRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: float price = 2;
     */
    price: number;
    /**
     * @generated from protobuf field: int32 status = 3;
     */
    status: number;
    /**
     * @generated from protobuf field: repeated string ingredients = 4;
     */
    ingredients: string[];
}
/**
 * @generated from protobuf message test_tablelink.CreateItemResponse
 */
export interface CreateItemResponse {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
}
/**
 * @generated from protobuf message test_tablelink.UpdateItemRequest
 */
export interface UpdateItemRequest {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: float price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
}
/**
 * @generated from protobuf message test_tablelink.UpdateItemResponse
 */
export interface UpdateItemResponse {
}
/**
 * @generated from protobuf message test_tablelink.DeleteItemRequest
 */
export interface DeleteItemRequest {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
}
/**
 * @generated from protobuf message test_tablelink.DeleteItemResponse
 */
export interface DeleteItemResponse {
}
/**
 * @generated from protobuf message test_tablelink.ListItemsRequest
 */
export interface ListItemsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
}
/**
 * @generated from protobuf message test_tablelink.ListItemsResponse
 */
export interface ListItemsResponse {
    /**
     * @generated from protobuf field: repeated test_tablelink.Item items = 1;
     */
    items: Item[];
}
/**
 * @generated from protobuf message test_tablelink.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: float price = 3;
     */
    price: number;
    /**
     * @generated from protobuf field: int32 status = 4;
     */
    status: number;
    /**
     * @generated from protobuf field: string created_at = 5;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 6;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string deleted_at = 7;
     */
    deletedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateIngredientRequest$Type extends MessageType<CreateIngredientRequest> {
    constructor() {
        super("test_tablelink.CreateIngredientRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cause_alergy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateIngredientRequest>): CreateIngredientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.causeAlergy = false;
        message.type = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateIngredientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateIngredientRequest): CreateIngredientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool cause_alergy */ 2:
                    message.causeAlergy = reader.bool();
                    break;
                case /* int32 type */ 3:
                    message.type = reader.int32();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateIngredientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool cause_alergy = 2; */
        if (message.causeAlergy !== false)
            writer.tag(2, WireType.Varint).bool(message.causeAlergy);
        /* int32 type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.CreateIngredientRequest
 */
export const CreateIngredientRequest = new CreateIngredientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateIngredientResponse$Type extends MessageType<CreateIngredientResponse> {
    constructor() {
        super("test_tablelink.CreateIngredientResponse", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateIngredientResponse>): CreateIngredientResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        if (value !== undefined)
            reflectionMergePartial<CreateIngredientResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateIngredientResponse): CreateIngredientResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateIngredientResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.CreateIngredientResponse
 */
export const CreateIngredientResponse = new CreateIngredientResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIngredientRequest$Type extends MessageType<UpdateIngredientRequest> {
    constructor() {
        super("test_tablelink.UpdateIngredientRequest", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cause_alergy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateIngredientRequest>): UpdateIngredientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.name = "";
        message.causeAlergy = false;
        message.type = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateIngredientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIngredientRequest): UpdateIngredientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool cause_alergy */ 3:
                    message.causeAlergy = reader.bool();
                    break;
                case /* int32 type */ 4:
                    message.type = reader.int32();
                    break;
                case /* int32 status */ 5:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIngredientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool cause_alergy = 3; */
        if (message.causeAlergy !== false)
            writer.tag(3, WireType.Varint).bool(message.causeAlergy);
        /* int32 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* int32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.UpdateIngredientRequest
 */
export const UpdateIngredientRequest = new UpdateIngredientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateIngredientResponse$Type extends MessageType<UpdateIngredientResponse> {
    constructor() {
        super("test_tablelink.UpdateIngredientResponse", []);
    }
    create(value?: PartialMessage<UpdateIngredientResponse>): UpdateIngredientResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateIngredientResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateIngredientResponse): UpdateIngredientResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateIngredientResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.UpdateIngredientResponse
 */
export const UpdateIngredientResponse = new UpdateIngredientResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIngredientRequest$Type extends MessageType<DeleteIngredientRequest> {
    constructor() {
        super("test_tablelink.DeleteIngredientRequest", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteIngredientRequest>): DeleteIngredientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteIngredientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteIngredientRequest): DeleteIngredientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteIngredientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.DeleteIngredientRequest
 */
export const DeleteIngredientRequest = new DeleteIngredientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteIngredientResponse$Type extends MessageType<DeleteIngredientResponse> {
    constructor() {
        super("test_tablelink.DeleteIngredientResponse", []);
    }
    create(value?: PartialMessage<DeleteIngredientResponse>): DeleteIngredientResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteIngredientResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteIngredientResponse): DeleteIngredientResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteIngredientResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.DeleteIngredientResponse
 */
export const DeleteIngredientResponse = new DeleteIngredientResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListIngredientsRequest$Type extends MessageType<ListIngredientsRequest> {
    constructor() {
        super("test_tablelink.ListIngredientsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListIngredientsRequest>): ListIngredientsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<ListIngredientsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListIngredientsRequest): ListIngredientsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListIngredientsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.ListIngredientsRequest
 */
export const ListIngredientsRequest = new ListIngredientsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListIngredientsResponse$Type extends MessageType<ListIngredientsResponse> {
    constructor() {
        super("test_tablelink.ListIngredientsResponse", [
            { no: 1, name: "ingredients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Ingredient }
        ]);
    }
    create(value?: PartialMessage<ListIngredientsResponse>): ListIngredientsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ingredients = [];
        if (value !== undefined)
            reflectionMergePartial<ListIngredientsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListIngredientsResponse): ListIngredientsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated test_tablelink.Ingredient ingredients */ 1:
                    message.ingredients.push(Ingredient.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListIngredientsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated test_tablelink.Ingredient ingredients = 1; */
        for (let i = 0; i < message.ingredients.length; i++)
            Ingredient.internalBinaryWrite(message.ingredients[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.ListIngredientsResponse
 */
export const ListIngredientsResponse = new ListIngredientsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ingredient$Type extends MessageType<Ingredient> {
    constructor() {
        super("test_tablelink.Ingredient", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cause_alergy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "type", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "deleted_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Ingredient>): Ingredient {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.name = "";
        message.causeAlergy = false;
        message.type = 0;
        message.status = 0;
        message.createdAt = "";
        message.updatedAt = "";
        message.deletedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Ingredient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ingredient): Ingredient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* bool cause_alergy */ 3:
                    message.causeAlergy = reader.bool();
                    break;
                case /* int32 type */ 4:
                    message.type = reader.int32();
                    break;
                case /* int32 status */ 5:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 7:
                    message.updatedAt = reader.string();
                    break;
                case /* string deleted_at */ 8:
                    message.deletedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ingredient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* bool cause_alergy = 3; */
        if (message.causeAlergy !== false)
            writer.tag(3, WireType.Varint).bool(message.causeAlergy);
        /* int32 type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* int32 status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* string created_at = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        /* string deleted_at = 8; */
        if (message.deletedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.deletedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.Ingredient
 */
export const Ingredient = new Ingredient$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateItemRequest$Type extends MessageType<CreateItemRequest> {
    constructor() {
        super("test_tablelink.CreateItemRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "ingredients", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateItemRequest>): CreateItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.price = 0;
        message.status = 0;
        message.ingredients = [];
        if (value !== undefined)
            reflectionMergePartial<CreateItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateItemRequest): CreateItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* float price */ 2:
                    message.price = reader.float();
                    break;
                case /* int32 status */ 3:
                    message.status = reader.int32();
                    break;
                case /* repeated string ingredients */ 4:
                    message.ingredients.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* float price = 2; */
        if (message.price !== 0)
            writer.tag(2, WireType.Bit32).float(message.price);
        /* int32 status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* repeated string ingredients = 4; */
        for (let i = 0; i < message.ingredients.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.ingredients[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.CreateItemRequest
 */
export const CreateItemRequest = new CreateItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateItemResponse$Type extends MessageType<CreateItemResponse> {
    constructor() {
        super("test_tablelink.CreateItemResponse", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateItemResponse>): CreateItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        if (value !== undefined)
            reflectionMergePartial<CreateItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateItemResponse): CreateItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.CreateItemResponse
 */
export const CreateItemResponse = new CreateItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemRequest$Type extends MessageType<UpdateItemRequest> {
    constructor() {
        super("test_tablelink.UpdateItemRequest", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemRequest>): UpdateItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.name = "";
        message.price = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemRequest): UpdateItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* float price */ 3:
                    message.price = reader.float();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* float price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit32).float(message.price);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.UpdateItemRequest
 */
export const UpdateItemRequest = new UpdateItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemResponse$Type extends MessageType<UpdateItemResponse> {
    constructor() {
        super("test_tablelink.UpdateItemResponse", []);
    }
    create(value?: PartialMessage<UpdateItemResponse>): UpdateItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemResponse): UpdateItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.UpdateItemResponse
 */
export const UpdateItemResponse = new UpdateItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteItemRequest$Type extends MessageType<DeleteItemRequest> {
    constructor() {
        super("test_tablelink.DeleteItemRequest", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteItemRequest>): DeleteItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteItemRequest): DeleteItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.DeleteItemRequest
 */
export const DeleteItemRequest = new DeleteItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteItemResponse$Type extends MessageType<DeleteItemResponse> {
    constructor() {
        super("test_tablelink.DeleteItemResponse", []);
    }
    create(value?: PartialMessage<DeleteItemResponse>): DeleteItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteItemResponse): DeleteItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.DeleteItemResponse
 */
export const DeleteItemResponse = new DeleteItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemsRequest$Type extends MessageType<ListItemsRequest> {
    constructor() {
        super("test_tablelink.ListItemsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListItemsRequest>): ListItemsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<ListItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemsRequest): ListItemsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.ListItemsRequest
 */
export const ListItemsRequest = new ListItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemsResponse$Type extends MessageType<ListItemsResponse> {
    constructor() {
        super("test_tablelink.ListItemsResponse", [
            { no: 1, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<ListItemsResponse>): ListItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemsResponse): ListItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated test_tablelink.Item items */ 1:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated test_tablelink.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.ListItemsResponse
 */
export const ListItemsResponse = new ListItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("test_tablelink.Item", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "deleted_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.name = "";
        message.price = 0;
        message.status = 0;
        message.createdAt = "";
        message.updatedAt = "";
        message.deletedAt = "";
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* float price */ 3:
                    message.price = reader.float();
                    break;
                case /* int32 status */ 4:
                    message.status = reader.int32();
                    break;
                case /* string created_at */ 5:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 6:
                    message.updatedAt = reader.string();
                    break;
                case /* string deleted_at */ 7:
                    message.deletedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* float price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit32).float(message.price);
        /* int32 status = 4; */
        if (message.status !== 0)
            writer.tag(4, WireType.Varint).int32(message.status);
        /* string created_at = 5; */
        if (message.createdAt !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 6; */
        if (message.updatedAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.updatedAt);
        /* string deleted_at = 7; */
        if (message.deletedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.deletedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message test_tablelink.Item
 */
export const Item = new Item$Type();
/**
 * @generated ServiceType for protobuf service test_tablelink.IngredientService
 */
export const IngredientService = new ServiceType("test_tablelink.IngredientService", [
    { name: "CreateIngredient", options: {}, I: CreateIngredientRequest, O: CreateIngredientResponse },
    { name: "UpdateIngredient", options: {}, I: UpdateIngredientRequest, O: UpdateIngredientResponse },
    { name: "DeleteIngredient", options: {}, I: DeleteIngredientRequest, O: DeleteIngredientResponse },
    { name: "ListIngredients", options: {}, I: ListIngredientsRequest, O: ListIngredientsResponse }
]);
/**
 * @generated ServiceType for protobuf service test_tablelink.ItemService
 */
export const ItemService = new ServiceType("test_tablelink.ItemService", [
    { name: "CreateItem", options: {}, I: CreateItemRequest, O: CreateItemResponse },
    { name: "UpdateItem", options: {}, I: UpdateItemRequest, O: UpdateItemResponse },
    { name: "DeleteItem", options: {}, I: DeleteItemRequest, O: DeleteItemResponse },
    { name: "ListItems", options: {}, I: ListItemsRequest, O: ListItemsResponse }
]);
